#!/bin/sh
############################################################
#
# Program history
############################################################
# Created by. Daejeon Office
# 2022.03.18 Version : Park Si Hyung, Yoon Jun Su
# 2022.03.24 Version : Yoon Jun Su
# 2022.03.28 Version : Yoon Jun Su
# 2022.05.06 Version : Yoon Jun Su

#export SHELL=`/bin/bash`
############################################################
#
# Program variables
############################################################
# Configuration file path
TBIS_AUTO_LOGFILE="tbis.log"
TBIS_AUTO_CFGFILE="tbis.cfg"
TBIS_AUTO_SQLFILE="tbis.sql"
TBIS_CWD_PATH=`pwd`

############################################################
# Function Lists
# 1. Auto Installation
############################################################
FN_AUTO_LOGFILE(){
    TBIS_AUTO_TIME=`date +%F_%T |sed 's/://g' |sed 's/-//g'`
    if [ -f "$TBIS_AUTO_LOGFILE" ]
    then
        mv $TBIS_AUTO_LOGFILE "$TBIS_AUTO_LOGFILE"_"$TBIS_AUTO_TIME"
    fi
}

FN_AUTO_PROGRESS_CHECK(){
    echo
    if [ "$INSTALL_MODE" == "ALL" ]
    then
        YESNO=YES
    else
        printf "continue ? ( [Y]es / [N]o / [S]kip ) : "
        read INPUT_YESNO
        case $INPUT_YESNO in
            "YES"|"Yes"|"yes"|"y"|"Y")
                YESNO=YES;;
            "NO"|"No"|"no"|"n"|"N")
                exit;;
            "SKIP"|"Skip"|"S"|"s")
                YESNO=SKIP;;
            *)
                exit;;
        esac
        echo
    fi
    
}

FN_AUTO_ENGINE(){
    STEP_FUNCTION="FN_AUTO_ENGINE"
    if [ "$TIBERO_ENGINE" == "Y" ] || [ "$TIBERO_ENGINE" == "y" ]
    then
        echo
        echo "############################################################"
        echo "# tbis Progress> Engine"
        echo "############################################################"
        echo
        echo "gunzip ../binary/tibero*.tar.gz"
        echo "tar -xvf ../binary/tibero*.tar -C $USER_HOME"
        echo
        FN_AUTO_PROGRESS_CHECK
        if [ "$YESNO" == "YES" ]
        then
                TB_HOME_EDIT=`echo $TB_HOME |sed 's/\// /g' |awk '{print $NF}'`
                TB_HOME=`echo $TB_HOME | sed 's/\/'$TB_HOME_EDIT'//g'`

                gunzip ../binary/tibero*.tar.gz
                tar -xvf ../binary/tibero*.tar -C $TB_HOME
                FN_SUCCESS_MSG
        fi     
    fi
    
}

FN_AUTO_TBINARY(){
    STEP_FUNCTION="FN_AUTO_TBINARY"
    if [ "$TIBERO_TBINARY" == "Y" ] || [ "$TIBERO_TBINARY" == "y" ]
    then
        echo
        echo "############################################################"
        echo "# tbis Progress> tbinary"
        echo "############################################################"
        echo
        echo "tar -xvf ../binary/tbinary*.tar -C $USER_HOME"
        echo
        FN_AUTO_PROGRESS_CHECK
        if [ "$YESNO" == "YES" ]
        then
            TBINARY_FILE_CHECK=`ls ../binary/tbinary*.tar 2>/dev/null`
            if [ -z "$TBINARY_FILE_CHECK" ]
            then
                echo "tbis message> tibero tbinary file check"
            elif [ -n "$TBINARY_FILE_CHECK" ]
            then
                tar -xvf ../binary/tbinary*.tar -C $USER_HOME
                FN_SUCCESS_MSG
            fi
        fi
    fi
}

FN_SUCCESS_MSG(){
    echo
    echo "  Success> Step : "$STEP_FUNCTION
    echo
}

FN_AUTO_PROFILE(){
    STEP_FUNCTION="FN_AUTO_PROFILE"
    echo
    echo "############################################################"
    echo "# tbis Progress> Profile " 
    echo "############################################################"
    echo
    echo ".bash_profile or .profile configuration"
    echo
    FN_AUTO_PROGRESS_CHECK
    if [ "$YESNO" == "YES" ]
    then
        TIBERO_BASHPROFILE=$USER_HOME/.bash_profile
        TIBERO_PROFILE=$USER_HOME/.profile
        if [ -f "$TIBERO_PROFILE" ]
        then
            echo ""
            TIBERO_PROFILE_CHECK=$TIBERO_PROFILE
            . ./tbis.cfg USER_PROFILE >> $USER_HOME/.profile
            . $TIBERO_PROFILE_CHECK
            FN_SUCCESS_MSG
        elif [ -f "$TIBERO_BASHPROFILE" ]
        then
            TIBERO_PROFILE_CHECK=$TIBERO_BASHPROFILE
            sh tbis.cfg USER_PROFILE >> $USER_HOME/.bash_profile
            . ./$TIBERO_PROFILE_CHECK
            FN_SUCCESS_MSG
        else
            echo "tbis message> .bash_profile or .profile file check"
            exit
        fi

    fi
}

FN_AUTO_LICENSE(){
    STEP_FUNCTION="FN_AUTO_LICENSE"
    echo
    echo "############################################################"
    echo "# tbis Progress> license "    
    echo "############################################################"
    echo
    echo "cp ../binary/license.xml $TB_HOME/license/license.xml"
    echo
    FN_AUTO_PROGRESS_CHECK
    if [ "$YESNO" == "YES" ]
    then
            cp ../binary/license.xml $TB_HOME/license/license.xml
            FN_SUCCESS_MSG
    fi
}

FN_AUTO_TB_SID_TIP(){
    STEP_FUNCTION="FN_AUTO_TB_SID_TIP"
    echo
    echo "############################################################"
    echo "# tbis Progress> TB_SID TIP File"
    echo "############################################################"
    echo
    echo "sh tbis.cfg TB_SID_TIP > $TB_HOME/config/$TB_SID.tip"
    echo
    FN_AUTO_PROGRESS_CHECK        
    if [ "$YESNO" == "YES" ]
    then
        if [ -z "$TB_SID" ]
        then
          echo "tbis message> \$TB_SID check"
          exit
        fi

        if [ "$TIBERO_NODE" == "observer" ]
        then
            2>/dev/null
        else
            sh tbis.cfg TB_SID_TIP > $TB_HOME/config/$TB_SID.tip
            FN_SUCCESS_MSG
        fi
    fi
}

FN_AUTO_CM_SID_TIP(){
    STEP_FUNCTION="FN_AUTO_CM_SID_TIP"
    echo
    echo "############################################################"
    echo "# tbis Progress> CM_SID TIP File"
    echo "############################################################"
    echo
    echo "sh tbis.cfg CM_SID_TIP > $TB_HOME/config/$TIBERO_NODE.tip"
    echo
    FN_AUTO_PROGRESS_CHECK
    if [ "$YESNO" == "YES" ]
    then
        if [ "$TIBERO_TYPE" == "SINGLE" ]
        then
            echo
            echo $TIBERO_TYPE
            echo $TIBERO_NODE
            echo
        else
            sh tbis.cfg CM_SID_TIP > $TB_HOME/config/$TIBERO_NODE.tip
            FN_SUCCESS_MSG
        fi
    fi
}

FN_AUTO_TBDSN(){
    STEP_FUNCTION="FN_AUTO_TBDSN"
    echo
    echo "############################################################"
    echo "# tbis Progress> TBDSN"
    echo "############################################################"
    echo
    echo "sh tbis.cfg FN_TB_DSN > $TB_HOME/client/cofnig/tbdsn.tbr"
    echo
    FN_AUTO_PROGRESS_CHECK
    if [ "$YESNO" == "YES" ]
    then
        
        if [ -z "$TB_HOME" ]
        then
          echo "tbis message> \$TB_HOME check"
          exit
        fi

        sh tbis.cfg TB_DSN > $TB_HOME/client/config/tbdsn.tbr
        FN_SUCCESS_MSG
    fi
}

FN_AUTO_TB_SID_NAME(){
    if [ "$TIBERO_TYPE" == "SINGLE" ]
    then
        export TB_SID=`echo $DB_NAME`
    elif [ "$TIBERO_TYPE" == "TSC" ]
    then
        if [ "$TIBERO_NODE" == "primary" ] 
        then
            export TB_SID=`echo "$DB_NAME"_p`
        elif [ "$TIBERO_NODE" == "standby" ]
        then
            export TB_SID=`echo "$DB_NAME"_s`
        elif [ "$TIBERO_NODE" == "observer" ]
        then
            export TB_SID="Observer_Not_TB_SID"
        fi
    elif [ "$TIBERO_TYPE" == "TAC" ]
    then
        if [ "$TIBERO_NODE" == "cm0" ]
        then
            export TB_SID=`echo "$DB_NAME"0`
        elif [ "$TIBERO_NODE" == "cm1" ]
        then
            export TB_SID=`echo "$DB_NAME"1`
        fi
    fi
}

FN_AUTO_PROGRESS_PROFILE(){
    TIBERO_BASHPROFILE=$USER_HOME/.bash_profile
    TIBERO_PROFILE=$USER_HOME/.profile

    if [ -f "$TIBERO_PROFILE" ]
    then
        TIBERO_PROFILE_CHECK=$TIBERO_PROFILE
    elif [ -f "$TIBERO_BASHPROFILE" ]
    then
        TIBERO_PROFILE_CHECK=$TIBERO_BASHPROFILE
    fi
}

FN_AUTO_CM_RESOURCE(){
    STEP_FUNCTION="FN_AUTO_CM_RESOURCE"
    echo
    echo "############################################################"
    echo "# tbis Progress> tbcm resource "    
    echo "############################################################"
    echo
    sh tbis.cfg CM_RESOURCE
    echo
    FN_AUTO_PROGRESS_CHECK
    FN_AUTO_PROGRESS_PROFILE
    . $TIBERO_PROFILE_CHECK

    if [ "$YESNO" == "YES" ]
    then
        if [ "$INSTALL_USER_NAME" == "root" ]
        then
            if [ "$TIBERO_TYPE" == "TSC" ]
            then
                if [ "$TIBERO_NODE" == "primary" ]
                then
                    su - $USER_NAME -c "cmrctl add network --name net0 --ipaddr $NODE1_INTER_IP --portno $TBCM_NET_PORT"
                    if [ -z "$NODE1_VIP_ETH" ]
                    then
                        su - $USER_NAME -c "cmrctl add cluster --name cls0 --incnet net0 --cfile $TB_HOME/config/CMFILE_cls0"
                        su - $USER_NAME -c "cmrctl start cluster --name cls0"
                        if [ "$TIBERO_OBSERVER_ENABLE" == "Y" ] 
                        then
                            su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls0 --tscid 11 --obsip $NODE_OBSERVER_IP --obsport $CM_OBSERVER_PORT"
                        elif [ "$TIBERO_OBSERVER_ENABLE" == "N" ]
                        then
                            su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls0 --tscid 11"
                        fi
                        su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME --envfile $TIBERO_PROFILE_CHECK"
                    else
                        su - $USER_NAME -c "cmrctl add network --name pub0 --nettype public --ifname $NODE1_VIP_ETH"
                        su - $USER_NAME -c "cmrctl add cluster --name cls0 --incnet net0 --pubnet pub0 --cfile $TB_HOME/config/CMFILE_cls0"
                        su - $USER_NAME -c "cmrctl start cluster --name cls0"
                        if [ "$TIBERO_OBSERVER_ENABLE" == "Y" ] 
                        then
                            su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls0 --tscid 11 --obsip $NODE_OBSERVER_IP --obsport $CM_OBSERVER_PORT"
                        elif [ "$TIBERO_OBSERVER_ENABLE" == "N" ]
                        then
                            su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls0 --tscid 11"
                        fi
                        su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME --envfile $TIBERO_PROFILE_CHECK"
                        su - $USER_NAME -c "cmrctl add vip --name vip0 --svcname $DB_NAME --ipaddr $NODE1_VIP_IP"
                    fi
                elif [ "$TIBERO_NODE" == "standby" ]
                then
                    su - $USER_NAME -c "cmrctl add network --name net1 --ipaddr $NODE2_INTER_IP --portno $TBCM_NET_PORT"
                        if [ -z "$NODE2_VIP_ETH" ]
                        then
                            su - $USER_NAME -c "cmrctl add cluster --name cls1 --incnet net1 --cfile $TB_HOME/config/CMFILE_cls1"
                            su - $USER_NAME -c "cmrctl start cluster --name cls1"
                            su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls1 --tscid 11 --obsip $NODE2_INTER_IP --obsport $CM_OBSERVER_PORT"
                            su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME --envfile $TIBERO_PROFILE_CHECK"
                        else
                            su - $USER_NAME -c "cmrctl add network --name pub1 --nettype public --ifname $NODE2_VIP_ETH"
                            su - $USER_NAME -c "cmrctl add cluster --name cls1 --incnet net1 --pubnet pub1 --cfile $TB_HOME/config/CMFILE_cls1"
                            su - $USER_NAME -c "cmrctl start cluster --name cls1"
                            su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls1 --tscid 11 --obsip $NODE2_INTER_IP --obsport $CM_OBSERVER_PORT"
                            su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME --envfile $TIBERO_PROFILE_CHECK   "
                            su - $USER_NAME -c "cmrctl add vip --name vip1 --svcname $DB_NAME --ipaddr $NODE2_VIP_IP"
                        fi
                elif [ "$TIBERO_NODE" == "observer" ]
                then
                    2>/dev/null
                fi
            elif [ "$TIBERO_TYPE" == "TAC" ]
            then
                2>/dev/null
                if [ "$TIBERO_NODE" == "cm0" ]
                then
                    su - $USER_NAME -c "cmrctl add network --name net0 --ipaddr $NODE1_INTER_IP --portno $TBCM_NET_PORT"
                    if [ -z "$NODE1_VIP_ETH" ]
                    then
                        su - $USER_NAME -c "cmrctl add cluster --name cls0 --incnet net0 --cfile $CFILE_PATH/CMFILE"
                        su - $USER_NAME -c "cmrctl start cluster --name cls0"
                        su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls0 --type db"
                        su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME"
                    else
                        su - $USER_NAME -c "cmrctl add network --name pub0 --nettype public --ifname $NODE1_VIP_ETH"
                        su - $USER_NAME -c "cmrctl add cluster --name cls0 --incnet net0 --pubnet pub0 --cfile $CFILE_PATH/CMFILE"
                        su - $USER_NAME -c "cmrctl start cluster --name cls0"
                        su - $USER_NAME -c "cmrctl add service --name $DB_NAME --cname cls0 --type db"
                        su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME"
                        su - $USER_NAME -c "cmrctl add vip --name vip0 --svcname $DB_NAME --ipaddr $NODE1_VIP_IP"
                    fi
                elif [ "$TIBERO_NODE" == "cm1" ]
                then
                    su - $USER_NAME -c "cmrctl add network --name net1 --ipaddr $NODE2_INTER_IP --portno $TBCM_NET_PORT"
                    if [ -z "$NODE2_VIP_ETH" ]
                    then
                        su - $USER_NAME -c "cmrctl add cluster --name cls0 --incnet net1  --cfile $CFILE_PATH/CMFILE"
                        su - $USER_NAME -c "cmrctl start cluster --name cls0"
                        su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME"
                    else
                        su - $USER_NAME -c "cmrctl add network --name pub1 --nettype public --ifname $NODE2_VIP_ETH"
                        su - $USER_NAME -c "cmrctl add cluster --name cls0 --incnet net1 --pubnet pub1 --cfile $CFILE_PATH/CMFILE"
                        su - $USER_NAME -c "cmrctl start cluster --name cls0"
                        su - $USER_NAME -c "cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME"
                        su - $USER_NAME -c "cmrctl add vip --name vip1 --svcname $DB_NAME --ipaddr $NODE2_VIP_IP"
                    fi
                fi
            fi    
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
            if [ "$TIBERO_TYPE" == "TSC" ]
            then
                if [ "$TIBERO_NODE" == "primary" ]
                then
                    cmrctl add network --name net0 --ipaddr $NODE1_INTER_IP --portno $TBCM_NET_PORT
                    if [ -z "$NODE1_VIP_ETH" ]
                    then
                        cmrctl add cluster --name cls0 --incnet net0 --cfile $TB_HOME/config/CMFILE_cls0
                        cmrctl start cluster --name cls0
                        if [ "$TIBERO_OBSERVER_ENABLE" == "Y" ] 
                        then
                            cmrctl add service --name $DB_NAME --cname cls0 --tscid 11 --obsip $NODE_OBSERVER_IP --obsport $CM_OBSERVER_PORT
                        elif [ "$TIBERO_OBSERVER_ENABLE" == "N" ]
                        then
                            cmrctl add service --name $DB_NAME --cname cls0 --tscid 11
                        fi
                        cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME --envfile $TIBERO_PROFILE_CHECK
                    fi
                elif [ "$TIBERO_NODE" == "standby" ]
                then
                    cmrctl add network --name net1 --ipaddr $NODE2_INTER_IP --portno $TBCM_NET_PORT
                        if [ -z $NODE2_VIP_ETH ]
                        then
                            cmrctl add cluster --name cls1 --incnet net1 --cfile $TB_HOME/config/CMFILE_cls1
                            cmrctl start cluster --name cls1
                            cmrctl add service --name $DB_NAME --cname cls1 --tscid 11 --obsip $NODE2_INTER_IP --obsport $CM_OBSERVER_PORT
                            cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME --envfile $TIBERO_PROFILE_CHECK
                        fi
                elif [ "$TIBERO_NODE" == "observer" ]
                then
                    2>/dev/null
                fi
            elif [ "$TIBERO_TYPE" == "TAC" ]
            then
                2>/dev/null
                if [ "$TIBERO_NODE" == "cm0" ]
                then
                    cmrctl add network --name net0 --ipaddr $NODE1_INTER_IP --portno $TBCM_NET_PORT
                    if [ -z $NODE1_VIP_ETH ]
                    then
                        cmrctl add cluster --name cls0 --incnet net0 --cfile $CFILE_PATH/CMFILE
                        cmrctl start cluster --name cls0
                        cmrctl add service --name $DB_NAME --cname cls0 --type db
                        cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME
                    fi
                elif [ "$TIBERO_NODE" == "cm1" ]
                then
                    cmrctl add network --name net1 --ipaddr $NODE2_INTER_IP --portno $TBCM_NET_PORT
                    if [ -z "$NODE2_VIP_ETH" ]
                    then
                        cmrctl add cluster --name cls0 --incnet net1  --cfile $CFILE_PATH/CMFILE
                        cmrctl start cluster --name cls0
                        cmrctl add db --name $TB_SID --svcname $DB_NAME --dbhome $TB_HOME
                    fi
                fi
            fi    
        fi
        sleep 1
        FN_SUCCESS_MSG
    fi
}

FN_AUTO_CM_BOOT(){
    STEP_FUNCTION="FN_AUTO_CM_BOOT"
    echo
    echo "############################################################"
    echo "# tbis Progress> tbcm boot "    
    echo "############################################################"
    echo
    echo "tbcm boot $CM_BOOT_OPTION"
    echo 
    FN_AUTO_PROGRESS_CHECK
    echo
    if [ "$YESNO" == "YES" ]
    then
        if [ "$TIBERO_NODE" == "observer" ]
        then
            if [ "$INSTALL_USER_NAME" == "root" ]
            then
                su - $USER_NAME -c "tbcmobs -b"
            elif [ "$INSTALL_USER_NAME" != "root" ]
            then
                tbcmobs -b
            fi        
        else
           if [ "$INSTALL_USER_NAME" == "root" ]
           then
                if [ -z "$NODE1_VIP_ETH" ]
                then
                    su - $USER_NAME -c "tbcm -b"
                elif [ -n "$NODE1_VIP_ETH" ]
                then
                    FN_AUTO_PROGRESS_PROFILE
                    . $TIBERO_PROFILE_CHECK
                    tbcm -b                                
                fi
            elif [ "$INSTALL_USER_NAME" != "root" ]
            then
                tbcm -b
            fi
        fi
        sleep 1 
        FN_SUCCESS_MSG
    fi
    
}

FN_AUTO_CM_DOWN(){
    STEP_FUNCTION="FN_AUTO_CM_DOWN"
    echo
    echo "############################################################"
    echo "# tbis Progress> tbcm down "    
    echo "############################################################"
    echo
    echo "tbcm down"
    echo
    FN_AUTO_PROGRESS_CHECK
    echo
    CM_DOWN_OPTION=$1
    if [ "$YESNO" == "YES" ]
    then
        if [ "$INSTALL_USER_NAME" == "root" ]
        then
            if [ -z "$NODE1_VIP_ETH" ]
            then
                su - $USER_NAME -c "tbcm -d"
            elif [ -n "$NODE1_VIP_ETH" ]
            then
                FN_AUTO_PROGRESS_PROFILE
                . $TIBERO_PROFILE_CHECK
                tbcm -d
            fi
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
            tbcm -d
        fi
        sleep 1
        FN_SUCCESS_MSG
    fi
 
}

FN_AUTO_CHANGE_OWNER(){
    STEP_FUNCTION="FN_AUTO_CHANGE_OWNER"
    echo "############################################################"
    echo "#  tbis Progress> Change Owner"
    echo "############################################################"
    echo
    echo "chwon -R $USER_NAME:$GROUP_NAME $USER_HOME"
    echo
    FN_AUTO_PROGRESS_CHECK
    if [ "$YESNO" == "YES" ]
    then
        chown -R $USER_NAME:$GROUP_NAME $USER_HOME
        chown -R $USER_NAME:$GROUP_NAME $TB_HOME
        FN_SUCCESS_MSG
    fi    
}

FN_AUTO_PROCESS_CHECK(){
    PROCESS_CHECK_OPTION=$1
    TIBERO_PROCESS=`ps -ef |grep tbsvr |grep -w $USER_NAME |grep -v grep |tail -n 1`
    TIBERO_SHM=`ipcs |grep -w $USER_NAME |tail -n 1`

    if [ -z "$TIBERO_PROCESS" ] || [ -z "$TIBERO_SHM" ]
    then
        echo "tbis message> tibero Process check"
        echo "  error> tbsvr process check"
        ps 
        ps -ef |grep tbsvr |grep -w $USER_NAME |grep -v grep 
        echo "  error> TIBERO Shared Memory & Semaphore"
        ipcs |grep $USER_NAME |head -n 3
        echo "...skip"        
        if [ "$PROCESS_CHECK_OPTION" == "EXIT" ]
        then
            exit
        elif [ "$PROCESS_CHECK_OPTION" == "CHECK" ] 
        then
            echo
        fi
    fi
}

FN_AUTO_TB_BOOT(){
    TB_BOOT_OPTION=$1
    STEP_FUNCTION="FN_AUTO_TB_BOOT"
    echo "############################################################"
    echo "#  tbis Progress> tbboot"
    echo "############################################################"
    echo
    echo "tbboot "$TB_BOOT_OPTION
    echo

    FN_AUTO_PROGRESS_CHECK
    if [ "$YESNO" == "YES" ]
    then
        if [ "$INSTALL_USER_NAME" == "root" ]
        then
            su - $USER_NAME -c "tbboot $TB_BOOT_OPTION"
            echo
            echo
            FN_SUCCESS_MSG
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
            tbboot $TB_BOOT_OPTION
            echo
            echo
            FN_SUCCESS_MSG
        fi
        sleep 1
    fi
    
}

FN_AUTO_TB_DOWN(){
    TB_DOWN_OPTION=$1
    STEP_FUNCTION="FN_AUTO_TB_DOWN"
    echo "############################################################"
    echo "#  tbis Progress> tbdown"
    echo "############################################################"
    echo
    echo "tbboot "$TB_DOWN_OPTION
    echo
    FN_AUTO_PROGRESS_CHECK
    echo
    if [ "$YESNO" == "YES" ]
    then
        FN_AUTO_PROCESS_CHECK EXIT
        if [ "$INSTALL_USER_NAME" == "root" ]
        then
            su - $USER_NAME -c "tbdown $TB_DOWN_OPTION"        
            FN_SUCCESS_MSG
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
            tbdown $TB_DOWN_OPTION
            FN_SUCCESS_MSG
        fi
        sleep 1
    fi
}

FN_AUTO_CREATEDB(){
    STEP_FUNCTION="FN_AUTO_CREATEDB"
    echo "############################################################"
    echo "#  tbis Progress> CREATE DATABASE"
    echo "############################################################"
    echo
    echo "Execution SQL FILE : $TBIS_CWD_PATH/tbis.sql"
    cat $TBIS_CWD_PATH/tbis.sql
    echo
    echo
    FN_AUTO_PROGRESS_CHECK
    echo
    if [ "$YESNO" == "YES" ]
    then
        FN_AUTO_PROCESS_CHECK EXIT
        if [ "$INSTALL_USER_NAME" == "root" ]
        then
            su - $USER_NAME -c "
            tbsql -s sys/tibero < $TBIS_CWD_PATH/tbis.sql
            "
            echo
            echo
            FN_SUCCESS_MSG
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
            tbsql sys/tibero < $TBIS_CWD_PATH/tbis.sql
            echo
            echo
            FN_SUCCESS_MSG
        else
            exit
        fi
        sleep 1
    fi
}

FN_AUTO_SYSTEM_SHELL(){
    STEP_FUNCTION="FN_AUTO_SYSTEM_SHELL"
    echo "############################################################"
    echo "#  tbis Progress> system.sh"
    echo "############################################################"
    echo
    echo "sh $TB_HOME/scripts/system.sh -p1 tibero -p2 syscat -a1 Y -a2 Y -a3 Y -a4 Y"
    echo
    FN_AUTO_PROGRESS_CHECK
    echo
    if [ "$YESNO" == "YES" ]
    then
        FN_AUTO_PROCESS_CHECK EXIT
        if [ "$INSTALL_USER_NAME" == "root" ]
        then 
            su - $USER_NAME -c "sh $TB_HOME/scripts/system.sh -p1 tibero -p2 syscat -a1 Y -a2 Y -a3 Y -a4 Y"
            echo
            echo
            FN_SUCCESS_MSG
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
            sh $TB_HOME/scripts/system.sh -p1 tibero -p2 syscat -a1 Y -a2 Y -a3 Y -a4 Y
            echo
            echo
            FN_SUCCESS_MSG
        fi    
        sleep 1
    fi    
}

FN_AUTO_ARCHIVE_DIR(){
    if [ "$TIBERO_TYPE" == "SINGLE" ]
    then
        ARCHIVE_LOG_FILE_PATH=`echo $LOG_ARCHIVE_DEST/tbarch`
        mkdir -p $ARCHIVE_LOG_FILE_PATH
    elif [ "$TIBERO_TYPE" == "TSC" ]
    then
        2>/dev/null
        if [ "$TIBERO_NODE" == "observer" ]
        then
            2>/dev/null
        elif [ "$TIBERO_NODE" == "primary" ]
        then
            ARCHIVE_LOG_FILE_PATH=`echo $LOG_ARCHIVE_DEST/tbarch`
            mkdir -p $ARCHIVE_LOG_FILE_PATH
        fi
    elif [ "$TIBERO_TYPE" == "TAC" ]
    then
        2>/dev/null
        if [ "$TIBERO_NODE" == "cm0" ]
        then
            ARCHIVE_LOG_FILE_PATH=`echo $LOG_ARCHIVE_DEST/tbarch0`
            mkdir -p $ARCHIVE_LOG_FILE_PATH
        elif [ "$TIBERO_NODE" == "cm1" ]
        then
            ARCHIVE_LOG_FILE_PATH=`echo $LOG_ARCHIVE_DEST/tbarch1`
            mkdir -p $ARCHIVE_LOG_FILE_PATH
        fi
    fi
    chown -R $USER_NAME:$GROUP_NAME $ARCHIVE_LOG_FILE_PATH
}

FN_AUTO_TSC_COPY(){
    STEP_FUNCTION="FN_AUTO_TSC_COPY"
    echo "############################################################"
    echo "#  tbis Progress> CF/DF/ARCH COPY to Target node"
    echo "############################################################"
    echo
    echo "scp -P $SCP_PORT -r $CONTROL_FILE_PATH1/tbctl1 "$USER_NAME"@"$NODE2_INTER_IP":$CONTROL_FILE_PATH1/tbctl1"
    echo "scp -P $SCP_PORT -r $CONTROL_FILE_PATH2/tbctl2 "$USER_NAME"@"$NODE2_INTER_IP":$CONTROL_FILE_PATH2/tbctl2"
    echo "scp -P $SCP_PORT -r $DB_CREATE_FILE_DEST/tbdata "$USER_NAME"@"$NODE2_INTER_IP":$DB_CREATE_FILE_DEST/tbdata"
    echo "scp -P $SCP_PORT -r $LOG_ARCHIVE_DEST/tbarch "$USER_NAME"@"$NODE2_INTER_IP":$LOG_ARCHIVE_DEST/tbarch"
    echo
    FN_AUTO_PROGRESS_CHECK
    echo
    if [ "$YESNO" == "YES" ]
    then  
        scp -P $SCP_PORT -r $CONTROL_FILE_PATH1/tbctl1 "$USER_NAME"@"$NODE2_INTER_IP":$CONTROL_FILE_PATH1/tbctl1
        scp -P $SCP_PORT -r $CONTROL_FILE_PATH2/tbctl2 "$USER_NAME"@"$NODE2_INTER_IP":$CONTROL_FILE_PATH2/tbctl2
        scp -P $SCP_PORT -r $DB_CREATE_FILE_DEST/tbdata "$USER_NAME"@"$NODE2_INTER_IP":$DB_CREATE_FILE_DEST/tbdata
        scp -P $SCP_PORT -r $LOG_ARCHIVE_DEST/tbarch "$USER_NAME"@"$NODE2_INTER_IP":$LOG_ARCHIVE_DEST/tbarch
        FN_SUCCESS_MSG
    fi    
}

FN_AUTO_TSC_CFG(){
    STEP_FUNCTION="FN_AUTO_TSC_CFG"
    echo "############################################################"
    echo "#  tbis Progress> Target TSC Configuration"
    echo "############################################################"
    echo
    echo "ALTER DATABASE STANDBY CONTROLFILE;"
    echo
    FN_AUTO_PROGRESS_CHECK
    echo
    if [ "$YESNO" == "YES" ]
    then   
        if [ "$INSTALL_USER_NAME" == "root" ]
        then
            su - $USER_NAME -c "
                tbsql -s sys/tibero <<EOF
                ALTER DATABASE STANDBY CONTROLFILE;
                exit
                EOF
            "        
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
tbsql -s sys/tibero <<EOF
ALTER DATABASE STANDBY CONTROLFILE;
exit
EOF
        fi        
        sleep 1
        FN_SUCCESS_MSG
    fi
}

FN_AUTO_SUCCESS(){
    TBIS_AUTO_TIME=`date +%F_%T |sed 's/://g' |sed 's/-//g'`
    TBIS_END_TIME=$TBIS_AUTO_TIME
    echo "############################################################"
    echo "# tbis auto installation end"
    echo "############################################################"
    echo "# tbis Progress> time: "$TBIS_END_TIME
    echo "# Installation Mode"
    echo "- Installation type : $TIBERO_TYPE"
    echo "- Installation node : $TIBERO_NODE"
    echo "-----------------------------------------------------------------"
    echo "# TIBERO DATABASE FILE DEST"
    echo "- TB_HOME PATH : $TB_HOME"
    echo "- TBINARY PATH : $TB_HOME/tbinary"
    echo "- CONTROL1_FILE : $CONTROL_FILE_PATH1/tbctl1/c1.ctl"
    echo "- CONTROL2_FILE : $CONTROL_FILE_PATH2/tbctl2/c2.ctl"
    echo "- DB_CREATE_FILE : $DB_CREATE_FILE_DEST/tbdata"
    echo "-----------------------------------------------------------------"
    
    if [ "$TIBERO_TYPE" != "SINGLE" ]
    then
        echo "# tbcm Process"
        ps -ef |grep -E "root|$USER_NAME" |grep -E "tbcm" |grep -v "grep"
        echo "-----------------------------------------------------------------"
    fi

    if [ "$TIBERO_TYPE" != "observer" ]
    then
        
        echo "# tbsvr Process"
        ps -ef |grep $USER_NAME |grep -E "tbsvr" |grep -v "grep"
        echo
        echo
    fi
    exit
}

FN_AUTO_TAC_CFG(){
    STEP_FUNCTION="FN_AUTO_TAC_CFG"
    echo "############################################################"
    echo "#  tbis Progress> TAC Configuration"
    echo "############################################################"
    echo
    echo "CREATE UNDO TABLESPACE UNDO1 DATAFILE 'system/undo101.dtf' SIZE $THREAD1_UNDO1_SIZE AUTOEXTEND OFF;"
    echo "ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 5 ('$DB_CREATE_FILE_DEST/tbdata/system/redo051.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo052.redo') SIZE $THREAD1_REDO_SIZE;"
    echo "ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 6 ('$DB_CREATE_FILE_DEST/tbdata/system/redo061.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo062.redo') SIZE $THREAD1_REDO_SIZE;"
    echo "ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 7 ('$DB_CREATE_FILE_DEST/tbdata/system/redo071.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo072.redo') SIZE $THREAD1_REDO_SIZE;"
    echo "ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 8 ('$DB_CREATE_FILE_DEST/tbdata/system/redo081.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo082.redo') SIZE $THREAD1_REDO_SIZE;"
    echo "ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 9 ('$DB_CREATE_FILE_DEST/tbdata/system/redo091.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo092.redo') SIZE $THREAD1_REDO_SIZE;"
    echo "ALTER DATABASE ENABLE PUBLIC THREAD 1;"
    echo
    FN_AUTO_PROGRESS_CHECK
    echo
    if [ "$YESNO" == "YES" ]
    then
        if [ "$INSTALL_USER_NAME" == "root" ]
        then
            su - $USER_NAME -c "
                tbsql -s sys/tibero <<EOF
                CREATE UNDO TABLESPACE UNDO1 DATAFILE 'system/undo101.dtf' SIZE $THREAD1_UNDO1_SIZE AUTOEXTEND OFF;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 5 ('$DB_CREATE_FILE_DEST/tbdata/system/redo051.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo052.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 6 ('$DB_CREATE_FILE_DEST/tbdata/system/redo061.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo062.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 7 ('$DB_CREATE_FILE_DEST/tbdata/system/redo071.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo072.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 8 ('$DB_CREATE_FILE_DEST/tbdata/system/redo081.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo082.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 9 ('$DB_CREATE_FILE_DEST/tbdata/system/redo091.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo092.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ENABLE PUBLIC THREAD 1;
                exit
EOF
            "
        elif [ "$INSTALL_USER_NAME" != "root" ]
        then
                tbsql -s sys/tibero <<EOF
                CREATE UNDO TABLESPACE UNDO1 DATAFILE 'system/undo101.dtf' SIZE $THREAD1_UNDO1_SIZE AUTOEXTEND OFF;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 5 ('$DB_CREATE_FILE_DEST/tbdata/system/redo051.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo052.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 6 ('$DB_CREATE_FILE_DEST/tbdata/system/redo061.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo062.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 7 ('$DB_CREATE_FILE_DEST/tbdata/system/redo071.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo072.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 8 ('$DB_CREATE_FILE_DEST/tbdata/system/redo081.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo082.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ADD LOGFILE THREAD 1 GROUP 9 ('$DB_CREATE_FILE_DEST/tbdata/system/redo091.redo','$DB_CREATE_FILE_DEST/tbdata/system/redo092.redo') SIZE $THREAD1_REDO_SIZE;
                ALTER DATABASE ENABLE PUBLIC THREAD 1;
                exit
EOF
        fi
        sleep 1
        FN_SUCCESS_MSG
    fi
}

FN_AUTO_INSTALL_CHECK(){
    clear
    echo "[*] TIBERO Auto installation Tools Configuration Checking STEP"
    echo "-----------------------------------------------------------------"
    echo "# Installation Mode"
    echo "- Installation type : $TIBERO_TYPE"
    echo "- Installation node : $TIBERO_NODE"
    FN_AUTO_TB_SID_NAME
    echo "-----------------------------------------------------------------"
    echo "# OS USER & GROUP"
    echo "- OS user : $USER_NAME"
    echo "- OS home : $USER_HOME"
    echo "- OS user group : $GROUP_NAME"    
    echo "-----------------------------------------------------------------"
    echo "# TIBERO DATABASE"
    echo "- TB_SID : $TB_SID"
    echo "- TB_HOME : $TB_HOME"
    echo "- DB_NAME : $DB_NAME"
    echo "- LISTENER_PORT : $LISTENER_PORT"
    echo "- CHARACTER SET : `cat tbis.sql|grep CHARACTER |awk '{print $NF}'`"
    if [ "$TIBERO_NODE" != "SINGLE" ]
    then
        echo "-----------------------------------------------------------------"
        echo "# TIBERO CM"
        echo "- CM_SID : $TIBERO_NODE"
        echo "- CM_HOME : $TB_HOME"
        echo "- NODE1_INTER_IP : $NODE1_INTER_IP"
        echo "- NODE2_INTER_IP : $NODE2_INTER_IP"
        if [ "$TIBERO_TYPE" == "TSC" ]
        then
            if [ "$TIBERO_OBSERVER_ENABLE" == "Y" ]
            then
                echo "- TIBERO_OBSERVER_ENABLE : $TIBERO_OBSERVER_ENABLE"
                echo "- NODE_OBSERVER_IP : $NODE_OBSERVER_IP"
            fi
            echo "- TSC VIP_ETH : $NODE1_VIP_ETH"
            echo "- TSC VIP : $NODE1_VIP_IP"
        elif [ "$TIBERO_TYPE" == "TAC" ]
        then
            echo "- NODE1_VIP_ETH : $NODE1_VIP_ETH"
            echo "- NODE1_VIP_IP : $NODE1_VIP_IP"
            echo "- NODE2_VIP_ETH : $NODE2_VIP_ETH"
            echo "- NODE2_VIP_IP : $NODE2_VIP_IP"
        fi
    fi    
    echo "-----------------------------------------------------------------"
    echo "# TIBERO DATABASE FILE DEST"
    echo "- TB_HOME PATH : $TB_HOME"
    echo "- TBINARY PATH : $TB_HOME/tbinary"
    echo "- CONTROL1_FILE : $CONTROL_FILE_PATH1/tbctl1/c1.ctl"
    echo "- CONTROL2_FILE : $CONTROL_FILE_PATH2/tbctl2/c2.ctl"
    echo "- DB_CREATE_FILE : $DB_CREATE_FILE_DEST/tbdata"
    
    if [ "$TIBERO_TYPE" == "SINGLE" ]
    then
        echo "- LOG_ARCHIVE_FILE : $LOG_ARCHIVE_DEST/tbarch"
    elif [ "$TIBERO_TYPE" == "TSC" ]
    then
        echo "- LOG_ARCHIVE_FILE : $LOG_ARCHIVE_DEST/tbarch"
    elif [ "$TIBERO_TYPE" == "TAC" ]
    then
        if [ "$TIBERO_NODE" == "cm0" ]
        then
            echo "- LOG_ARCHIVE_FILE : $LOG_ARCHIVE_DEST/tbarch0"
        elif [ "$TIBERO_NODE" == "cm1" ]
        then
            echo "- LOG_ARCHIVE_FILE : $LOG_ARCHIVE_DEST/tbarch1"
        fi
    fi
    echo "-----------------------------------------------------------------"
    echo "# TIBERO INSTALLATION BINARY "
    TIBERO_LICENSE_FILE=`ls ../binary/license.xml 2>/dev/null`
    if [ -f "$TIBERO_LICENSE_FILE" ]
    then
        echo "- LICENSE FILE : "$TIBERO_LICENSE_FILE
    else
        echo "tbis message> license.xml file check"
    fi

    TIBERO_ENGINE_FILE=`ls ../binary/tibero* 2>/dev/null`
    if [ -f "$TIBERO_ENGINE_FILE" ]
    then
        
        echo "- ENGINE FILE : "$TIBERO_ENGINE_FILE
    else
        echo "tbis message> TIBERO ENGINE file check"
    fi

    TIBERO_TBINARY_FILE=`ls ../binary/tbinary* 2>/dev/null`
    if [ -f "$TIBERO_TBINARY_FILE" ]
    then
        echo "- TBINARY FILE : "$TIBERO_TBINARY_FILE
    else
        echo "tbis message> TBINARY file check"
    fi    
    echo "-----------------------------------------------------------------"
    echo "# TIBERO Configuration Files"
    echo "- cat tbis.cfg : TIBERO Configuration File"
    echo "- cat tbis.sql : CREATE DATABASE SQL File"
    echo "-----------------------------------------------------------------"
    
    ### IN PROCESS
    echo
    printf "continue ? ( [Y]es / [N]o / [AA] All Auto] ) : "
    read INPUT_YESNO
    case $INPUT_YESNO in
        "YES"|"Yes"|"yes"|"y"|"Y")
            INSTALL_MODE=YES;;
        "NO"|"No"|"no"|"n"|"N")
            exit;;
        "AA"|"aa")
            INSTALL_MODE=ALL;;
        *)
            exit;;
    esac
    echo
    ###
}

############################################################
# Function Lists
# 1. tbis Installation Tools
############################################################
FN_AUTO_INSTALL(){
    ############# In Progress
    chmod 655 tbis.log
    TBIS_AUTO_TIME=`date +%F_%T |sed 's/://g' |sed 's/-//g'`
    TBIS_START_TIME=$TBIS_AUTO_TIME
    echo "############################################################"
    echo "# tbis Start Log"
    echo "############################################################"
    echo "# start time : $TBIS_START_TIME"
    echo
    echo
    cat ./tbis.cfg |grep "export" |grep -v "echo"
    clear
    . ./tbis.cfg

    FN_AUTO_CNF_CHECK
    FN_AUTO_INSTALL_CHECK     
    FN_AUTO_ENGINE
    FN_AUTO_TBINARY
    FN_AUTO_PROFILE
    if [ "$TIBERO_TYPE" == "SINGLE" ]
    then
        FN_AUTO_TB_SID_TIP
        FN_AUTO_TBDSN
        FN_AUTO_LICENSE
        FN_AUTO_CHANGE_OWNER
        FN_AUTO_TB_BOOT NOMOUNT
        FN_AUTO_CREATEDB
        FN_AUTO_TB_BOOT NORMAL
        FN_AUTO_SYSTEM_SHELL
        FN_AUTO_ARCHIVE_DIR
    elif [ "$TIBERO_TYPE" == "TSC" ]
    then
        if [ "$TIBERO_NODE" == "primary" ]
        then
            FN_AUTO_TB_SID_TIP
            FN_AUTO_TBDSN
            FN_AUTO_LICENSE
            FN_AUTO_CM_SID_TIP
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_CM_BOOT
            FN_AUTO_CM_RESOURCE
            if [ -z "$NODE1_VIP_ETH" ]
            then
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_DOWN
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_BOOT
            else
                2>/dev/null
            fi
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_TB_BOOT NOMOUNT
            FN_AUTO_CREATEDB
            FN_AUTO_TB_BOOT NORMAL
            FN_AUTO_SYSTEM_SHELL
            FN_AUTO_TB_DOWN IMMEDIATE
            FN_AUTO_TSC_COPY
            FN_AUTO_ARCHIVE_DIR
        elif [ "$TIBERO_NODE" == "standby" ]
        then
            FN_AUTO_TB_SID_TIP
            FN_AUTO_TBDSN
            FN_AUTO_LICENSE
            FN_AUTO_CM_SID_TIP
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_CM_BOOT ROOT
            FN_AUTO_CM_RESOURCE
            if [ -z "$NODE2_VIP_ETH" ]
            then
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_DOWN
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_BOOT
            else
                2>/dev/null
            fi            
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_TB_BOOT MOUNT
            FN_AUTO_TSC_CFG
            FN_AUTO_TB_DOWN IMMEDIATE
            FN_AUTO_ARCHIVE_DIR
        elif [ "$TIBERO_NODE" == "observer" ]
        then
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_CM_SID_TIP
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_CM_BOOT
        fi
    elif [ "$TIBERO_TYPE" == "TAC" ]
    then
        if [ "$TIBERO_NODE" == "cm0" ]
        then
            FN_AUTO_TB_SID_TIP
            FN_AUTO_TBDSN
            FN_AUTO_LICENSE
            FN_AUTO_CM_SID_TIP
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_CM_BOOT ROOT
            FN_AUTO_CM_RESOURCE
            if [ -z "$NODE1_VIP_ETH" ]
            then
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_DOWN
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_BOOT
            else
                2>/dev/null
            fi
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_TB_BOOT NOMOUNT
            FN_AUTO_CREATEDB
            FN_AUTO_TB_BOOT NORMAL
            FN_AUTO_SYSTEM_SHELL
            FN_AUTO_TAC_CFG
            FN_AUTO_ARCHIVE_DIR
        elif [ "$TIBERO_NODE" == "cm1" ]
        then
            FN_AUTO_TB_SID_TIP
            FN_AUTO_TBDSN
            FN_AUTO_LICENSE
            FN_AUTO_CM_SID_TIP
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_CM_BOOT ROOT
            FN_AUTO_CM_RESOURCE
            if [ -z "$NODE2_VIP_ETH" ]
            then
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_DOWN
                FN_AUTO_CHANGE_OWNER
                FN_AUTO_CM_BOOT
            else
                2>/dev/null
            fi
            FN_AUTO_CHANGE_OWNER
            FN_AUTO_TB_BOOT NORMAL
            FN_AUTO_ARCHIVE_DIR
        fi
    fi
    FN_AUTO_SUCCESS
}

FN_AUTO_CNF_CHECK(){
    echo "############################################################"
    echo "# tbis warning step"
    echo "############################################################"
    echo
    TB_FAIL_CHK="N"
    TB_ERROR_CHK="Y"

    if [ "$TB_ERROR_CHK" == "Y" ]
    then
        echo "tbis message> tbis - Parameter"
        echo "----------------------------------------------------"
        if [ -z "$USER_NAME" ]
        then
            echo "  error> tbis.cfg - USER_NAME check"
            TB_FAIL_CHK="Y"
        fi

        if [ -z "$USER_HOME" ]
        then
            echo "  error> tbis.cfg - USER_HOME check"
            TB_FAIL_CHK="Y"
        fi

        if [ -z "$GROUP_NAME" ]
        then
            echo "  error> tbis.cfg - GROUP_NAME check"
            TB_FAIL_CHK="Y"
        fi

        if [ "$TIBERO_NODE" == "observer" ]
        then
            2>/dev/null
        else
            if [ -z "$DB_NAME" ]
            then
                echo "  error> tbis.cfg - DB_NAME check"
                TB_FAIL_CHK="Y"
            fi

            if [ -z "$CONTROL_FILE_PATH1" ]
            then
                echo "  error> tbis.cfg - CONTROL_FILE_PATH1 check"
                TB_FAIL_CHK="Y"
            fi

            if [ -z "$CONTROL_FILE_PATH2" ]
            then
                echo "  error> tbis.cfg - CONTROL_FILE_PATH2 check"
                TB_FAIL_CHK="Y"
            fi

            if [ -z "$DB_CREATE_FILE_DEST" ]
            then
                echo "  error> tbis.cfg - DB_CREATE_FILE_DEST check"
                TB_FAIL_CHK="Y"
            fi

            if [ -z "$LOG_ARCHIVE_DEST" ]
            then
                echo "  error> tbis.cfg - LOG_ARCHIVE_DEST check"
                TB_FAIL_CHK="Y"
            fi
        fi

        if [ -z "$TB_HOME" ]
        then
            echo "  error> tbis.cfg - TB_HOME check"
            TB_FAIL_CHK="Y"
        fi

        if [ -z "$TIBERO_TYPE" ]
        then
            echo "  error> tbis.cfg - TIBERO_TYPE check"
            TB_FAIL_CHK="Y"
        elif [ -z "$TIBERO_NODE" ]
        then
            echo "  error> tbis.cfg - TIBERO_NODE check"
            TB_FAIL_CHK="Y"
        elif [ "$TIBERO_TYPE" == "SINGLE" ]
        then
            if [ "$TIBERO_NODE" != "SINGLE" ]
            then
                echo "  error> tbis.cfg - TIBERO_NODE ($TIBERO_NODE)  check"
                TB_FAIL_CHK="Y"
            fi
        elif [ "$TIBERO_TYPE" == "TSC" ]
        then
            if [ "$TIBERO_NODE" == "SINGLE" ] || [ "$TIBERO_NODE" == "cm0" ] || [ "$TIBERO_NODE" == "cm1" ]
            then
                echo "  error> tbis.cfg - TIBERO_NODE ($TIBERO_NODE)  check"
                TB_FAIL_CHK="Y"
            fi

            if [ "$TIBERO_NODE" == "observer" ]
            then
                2>/dev/null
            else
                if [ -z "$NODE1_INTER_IP" ]
                then
                    echo "  error> tbis.cfg - NODE1_INTER_IP check"
                    TB_FAIL_CHK="Y"
                fi

                if [ -z "$NODE2_INTER_IP" ]
                then
                    echo "  error> tbis.cfg - NODE2_INTER_IP check"
                    TB_FAIL_CHK="Y"
                fi
            fi
        elif [ "$TIBERO_TYPE" == "TAC" ]
        then
            if [ "$TIBERO_NODE" == "SINGLE" ] || [ "$TIBERO_NODE" == "observer" ] || [ "$TIBERO_NODE" == "primary" ] || [ "$TIBERO_NODE" == "standby" ]
            then
                echo "  error> tbis.cfg - TIBERO_NODE ($TIBERO_NODE) check"
                echo "----------------------------------------------------"
                TB_FAIL_CHK="Y"
            fi

            if [ -z "$NODE1_INTER_IP" ]
            then
                echo "  error> tbis.cfg - NODE1_INTER_IP check"
                TB_FAIL_CHK="Y"
            fi

            if [ -z "$NODE2_INTER_IP" ]
            then
                echo "  error> tbis.cfg - NODE2_INTER_IP check"
                TB_FAIL_CHK="Y"
            fi

            if [ -z "$CFILE_PATH" ]
            then
                echo "  error> tbis.cfg - CFILE_PATH check"
                TB_FAIL_CHK="Y"
            fi
            echo "----------------------------------------------------"
        fi

        if [ "$TB_FAIL_CHK" != "Y" ]
        then
            echo "  message> tbis.cfg - No problem"
        fi
    fi
    echo "----------------------------------------------------"
    echo

    echo "tbis message> tbis - OS Installation USER/GROUP check"
    echo "----------------------------------------------------" 
    TB_FAIL_OS_PARAM="N"
    if [ -z "$NODE1_VIP_ETH" ]
    then
        TB_FAIL_OS_PARAM="N"
    elif [ -n "$NODE1_VIP_ETH" ]
    then
        if [ "$INSTALL_USER_NAME" != "root" ]
        then
            echo "  error> TSC or TAC Configuration VIP Enable  check"
            echo "  error> VIP Enable only OS USER root check "
            echo "      * Current OS User : "$INSTALL_USER_NAME
            TB_FAIL_OS_PARAM="Y"
        elif [ "$INSTALL_USER_NAME" == "root" ]
        then
            TB_FAIL_OS_PARAM="N"
        fi

        if [ "$TIBERO_TYPE" == "TSC" ]
        then
            if [ "$NODE1_VIP_IP" != "$NODE2_VIP_IP" ]
            then
                echo "  error> TSC nodes same VIP check"
                TB_FAIL_OS_PARAM="Y"
            fi
        fi
    fi
   
    OS_USER_CHECK=`id -nu $USER_NAME`
    OS_GROUP_CHECK=`id -ng $USER_NAME |grep $GROUP_NAME 2>/dev/null`

    if [ "$OS_USER_CHECK" != "$USER_NAME" ] || [ -z "$OS_USER_CHECK" ]
    then
        echo "  error> USER_NAME : $USER_NAME Unknown "
        TB_FAIL_OS_PARAM="Y"
    fi

    if [ "$OS_GROUP_CHECK" != "$GROUP_NAME" ] || [ -z "$OS_GROUP_CHECK" ]
    then
        echo "  error> GROUP_NAME : $GROUP_NAME Unknown "
        TB_FAIL_OS_PARAM="Y"
    fi
    
    if [ "$TB_FAIL_OS_PARAM" != "Y" ]
    then
        echo "  message> tbis.cfg - No problem"
    fi
    echo "----------------------------------------------------"
    echo

    echo "tbis message> tbis - file check"
    echo "----------------------------------------------------"
    TB_FAIL_FILE_PARAM="N"
    ENGINE_FILE_CHECK=`ls ../binary/tibero*.tar* 2>/dev/null`    
    if [ -z "$ENGINE_FILE_CHECK" ]
    then
        echo "  error> tibero engine file check"
        TB_FAIL_FILE_PARAM="Y"
    fi

    LICENSE_FILE_CHECK=`ls ../binary/license.xml 2>/dev/null`
    if [ -z "$LICENSE_FILE_CHECK" ]
    then
        echo "  error> tibero license file check"
        TB_FAIL_FILE_PARAM="Y"
	fi
    
    if [ "$TB_FAIL_FILE_PARAM" != "Y" ]
    then
        echo "  message> tbis.cfg - No problem"
    fi
    echo "----------------------------------------------------"
    ##########################
    # Y = exit
    # N = Continue
    ##########################
    #-------------------------
    if [ "$TB_FAIL_CHK" == "Y" ] || [ "$TB_FAIL_OS_PARAM" == "Y" ] || [ "$TB_FAIL_FILE_PARAM" == "Y" ]
    then
        exit
    elif [ "$TB_FAIL_CHK" == "N" ] && [ "$TB_FAIL_OS_PARAM" == "N" ]  && [ "$TB_FAIL_FILE_PARAM" == "N" ]
    then
        continue;
    fi
    #-------------------------
}

FN_RUN_SQL(){
	tbsql -s sys/tibero @tbis_report/$1
}

############################################################
# Function Lists
# 2. tbis Installation Report
############################################################
FN_AUTO_INSTALL_REPORT(){
    clear
    . ./tbis.cfg
    FN_AUTO_TB_SID_NAME
    FN_AUTO_PROGRESS_PROFILE
    . $TIBERO_PROFILE_CHECK
    echo "TIBERO AUTO INSTALLATION REPORT" 
    echo "-----------------------------------------------------------------"
    echo "# 1. tbboot -l"
    echo "# 2. ncpu"
    echo "# 3. installation infomation"
    echo "# 4. profile"
    echo "# 5. CREATE DATABASE sql"
    echo "# 6. instance tip"
    echo "# 7. datafile infomation"
    echo "# 8. tablespace infomation"
    echo "# 9. OS infomation"
    echo "# 10. tbiobench"
    echo "-----------------------------------------------------------------"
    echo "b - before"
    echo "press other key to quit"
    echo "-----------------------------------------------------------------"
    printf "Choose the Number : "
    read INPUT_NUMBER
    case $INPUT_NUMBER in
    1)
        clear
        tbboot -l
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    2)
        clear
        sh ./tbis_report/ncpu/chk_cpu_for_license.sh TIBERO
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    3) 
        clear
        echo "- Tibero Version : "`tbboot -version |grep -i "tibero" |head -n 1`
        echo "- OS User : "$USER_NAME
        echo "- Tibero 설치 위치 (엔진 홈) : "$TB_HOME
        echo "- DB Name (SID) : "$TB_SID
        echo "- Service Port (Listener Port) : "$LISTENER_PORT
        echo "- Character Set : "`cat tbis.sql|grep CHARACTER |awk '{print $NF}'`
        echo "- Total Shared Memory : "`cat $TB_HOME/config/$TB_SID.tip |grep TOTAL_SHM_SIZE |awk -F= '{print $NF}'`
        echo "- Memory Target : "`cat $TB_HOME/config/$TB_SID.tip |grep MEMORY_TARGET |awk -F= '{print $NF}'`
        echo "- Max Session : "`cat $TB_HOME/config/$TB_SID.tip |grep MAX_SESSION_COUNT |awk -F= '{print $NF}'`
        echo "- Controlfile 위치 : "`cat $TB_HOME/config/$TB_SID.tip |grep CONTROL_FILES |awk -F= '{print $NF}'`
        echo "- Datafile 위치 : "`cat $TB_HOME/config/$TB_SID.tip |grep DB_CREATE_FILE_DEST |awk -F= '{print $NF}'`
        echo "- Archive 모드 및 위치 : "`cat $TB_HOME/config/$TB_SID.tip |grep LOG_ARCHIVE_DEST|awk -F= '{print $NF}'`
        echo "- Instance log 위치 : "$TB_HOME"/instance"
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    4)
        clear
        cat $TIBERO_PROFILE_CHECK
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    5)
        clear
        cat ./tbis.sql
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    6)
        clear
        cat $TB_HOME/config/$TB_SID.tip
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    7)
        clear
        echo "========================"
        echo " Controlfile Infomation "
        echo "========================"
        FN_RUN_SQL 5_control.sql
        echo
        echo "===================="
        echo " Logfile Infomation "
        echo "===================="
        FN_RUN_SQL 5_logfile.sql
        echo
        echo "====================="
        echo " Datafile Infomation "
        echo "====================="
        FN_RUN_SQL 5_datafile.sql
        echo
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    8)
        clear
        echo "======================="
        echo " Tablespace Infomation "
        echo "======================="
        FN_RUN_SQL 5_tbs.sql
        echo
        echo "============================"
        echo " Temp Tablespace Infomation "
        echo "============================"
        FN_RUN_SQL 5_temp_tbs.sql
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;    
    9)
        clear
        echo "uname"
        uname -a
        echo
        echo "ulimit"
        ulimit -a
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    10)
        clear
        cd $DB_CREATE_FILE_DEST
        echo "Running PATH : $DB_CREATE_FILE_DEST"
        tbiobench -i all -s 1G -F O_SYNC -F O_DIRECT -k
        cd $OLDPWD
        TBIO_GARBAGE_FILE=`ls $DB_CREATE_FILE_DEST/*.tmp 2>/dev/null`
        for TBIO_GARBAGE_NAME in ${TBIO_GARBAGE_FILE[@]}
        do
            echo "Garbage file : "$TBIO_GARBAGE_NAME
        done
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY         
        FN_AUTO_INSTALL_REPORT;;
    b)
        FN_MAIN_MENU;;
    *)
        exit;;
    esac
}

############################################################
# Function Lists
# 3. tbis Configuration Text
############################################################
FN_PRINT_PRESS(){
    echo "Press Enter Key to continue..."
}

FN_AUTO_CONFIGURATION(){  
    clear
    . ./tbis.cfg
    echo
    echo "# TIBERO auto configuration text"
    echo "- Step by step"
    echo "-----------------------------------------------------------------"
    echo "# Installation Mode"
    echo "- Installation type : $TIBERO_TYPE"
    echo "- Installation node : $TIBERO_NODE"
    echo "-----------------------------------------------------------------"
    echo
    echo "# Operation System"
    echo "-----------------------------------------------------------------"
    echo "# 1. OS user"
    echo "# 2. Profile"
    echo "# 3. Home directory concept"
    echo "-----------------------------------------------------------------"
    echo
    echo "# DATABASE"
    echo "-----------------------------------------------------------------"
    echo "# 10. Instance tip"
    echo "# 11. tbdsn.tbr"
    echo "# 12. CREATE DATABASE SQL Syntax"
    echo "-----------------------------------------------------------------"
    echo
    echo "# Cluster Manager "
    echo "-----------------------------------------------------------------"
    echo "# 20. CM tip"
    echo "# 21. CM resource"
    echo "-----------------------------------------------------------------"
    echo
    echo "b - before"    
    echo "press other key to quit"
    echo "-----------------------------------------------------------------"
    printf "Choose the Number : "
    read INPUT_NUMBER
    echo
    echo
    case $INPUT_NUMBER in
    1)
        clear
        echo "-----------------------------------------------------------------"
        echo "# OS USER/GROUP Result"
        echo "-----------------------------------------------------------------"
        echo "# LINUX | HP-UX | Solaris"
        echo
        echo "groupadd $GROUP_NAME"
        echo "useradd $USER_NAME -d $USER_HOME -g $GROUP_NAME"
        echo
        echo "-----------------------------------------------------------------"
        echo "# AIX "
        echo
        echo "mkgroup $GROUP_NAME"
        echo "useradd $USER_NAME -d $USER_HOME -g $GROUP_NAME"
        echo "-----------------------------------------------------------------"
        echo
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY
        FN_AUTO_CONFIGURATION
        echo;;
    2)
        clear   
        sh tbis.cfg USER_PROFILE
        echo
        echo        
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY        
        FN_AUTO_CONFIGURATION
        echo;;
    3)
        clear
        echo "TIBERO user home direcotry"
        echo "------------------------------------------------------"
        echo "\$HOME --------------------- OS User Home directory"
        echo "├── tbinary --------------- TIBERO Admin Scripts"
        echo "├── tbinstall ------------- TIBERO Install/Patch"
        echo "│   ├── backup ------------ Patch Engine Backup"
        echo "│   ├── binary ------------ Installation File"
        echo "│   ├── patch_info.txt ---- Installation and Patch Information Text file"
        echo "│   └── tbis -------------- Installaion Script"
        echo "└── tibero6 (\$TB_HOME) ---- TIBERO Engine"
        echo
        echo
        echo "TIBERO archive directory"
        echo "------------------------------------------------------"
        echo "PATH ------------------------ Archive Partition"
        echo "├── tbarch ------------------ SINGLE and TSC"
        echo "├── tbarch0 ----------------- TAC node1(thread0)"
        echo "└── tbarch1 ----------------- TAC node2(thread1)"
        echo
        echo
        echo "TIBERO data directory"
        echo "------------------------------------------------------"
        echo "PATH ------------------------ DATA Partition"
        echo "├── tbctl1 ------------------ Controlfile"
        echo "├── tbctl2 ------------------ Controlfile"
        echo "└── tbdata ------------------"
        echo "    └── system -------------- CREATE DATABASE FILE"
        echo
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY
        FN_AUTO_CONFIGURATION
        echo;;
    10)
        clear       
        sh tbis.cfg TB_SID_TIP
        echo
        echo        
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY        
        FN_AUTO_CONFIGURATION
        echo;;
    11)
        clear
        FN_AUTO_TB_SID_NAME
        sh tbis.cfg TB_DSN
        echo
        echo        
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY        
        FN_AUTO_CONFIGURATION
        echo;;
    12)
        clear
        cat ./tbis.sql
        echo
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY        
        FN_AUTO_CONFIGURATION
        echo;;        
    20)
        clear   
        sh tbis.cfg CM_SID_TIP
        echo
        echo        
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY
        FN_AUTO_CONFIGURATION
        echo;;
    21)
        clear       
        sh tbis.cfg CM_RESOURCE
        echo
        echo
        FN_PRINT_PRESS
        read PRINT_PRESS_KEY        
        FN_AUTO_CONFIGURATION
        echo;;
    "b")
        FN_MAIN_MENU;;
    *)
        exit;;
    esac
}


############################################################
# Function Lists
# tbis main
############################################################
FN_MAIN_MENU(){        
    CURRENT_DIRECTORY=`pwd`
    CURRENT_DIRECTORY_CHK=`ls $CURRENT_DIRECTORY/tbis.cfg 2>/dev/null` 

    if [ -z $CURRENT_DIRECTORY_CHK ]
    then
        echo "tbis message> Current working directory checking (CWD : $CURRENT_DIRECTORY)."
        exit
    fi
    
    clear
    echo "[*] TIBERO Installation Shell Script"
    echo "[*] This script is for TmaxTibero "Daejeon Office" only."
    echo "[*] Supported Version : Tibero 6 FS07 ↑"
    echo "-----------------------------------------------------------------"
    echo "# 1. tbis Installation Tools"
    echo "# 2. tbis Installation Report"
    echo "# 3. tbis Configuration Text"
    echo "-----------------------------------------------------------------"
    echo "# press other key to quit"
    echo "-----------------------------------------------------------------"
    printf "Choose the Number : "
    read INPUT_NUMBER
    case $INPUT_NUMBER in
    1)
        clear
        FN_AUTO_LOGFILE
        FN_AUTO_INSTALL |tee $TBIS_AUTO_LOGFILE 
        exit;;
    2)
        FN_AUTO_INSTALL_REPORT
        exit;;
    3)
        FN_AUTO_CONFIGURATION
        exit;;
    *)
        clear
        echo "tbis message> program quit.";;
    esac
} 

############################################################
# Program start
#
############################################################
FN_MAIN_MENU
